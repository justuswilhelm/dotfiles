#!/usr/bin/env python3
from os import path
from functools import partial


def clean_cask_args(cask_args):
    """Clean cask_arg."""
    assert len(cask_args) == 1
    assert cask_args[0].startswith('cask_args')
    yield cask_args[0]


def clean_tap(tap):
    """Clean tap arguments."""
    for line in tap:
        assert line.startswith('tap'), (
            "Expected {} to start with 'tap'".format(line))
        yield line


def clean_brew(brew):
    """Clean brew."""
    for line in brew:
        assert line.startswith('brew'), (
            "Expected {} to start with 'brew'".format(line))
        yield line


def clean_cask(cask):
    """Clean cask."""
    for line in cask:
        assert line.startswith('cask'), (
            "Expected {} to start with 'cask'".format(line))
        yield line


def sorted_join(lines):
    """Sort lines and join with newline."""
    return "\n".join(sorted(lines))


def main():
    """Main method."""
    brewfile_path = path.expandvars("$HOME/.brewfile")

    with open(brewfile_path) as fd:
        brewfile = fd.read()
        cask_args, tap, brew, cask = (
            part.splitlines() for part in brewfile.split("\n\n")
        )

    cask_args = clean_cask_args(cask_args)
    tap = clean_tap(tap)
    brew = clean_brew(brew)
    cask = clean_cask(cask)

    with open(brewfile_path, 'w') as fd:
        fd_print = partial(print, file=fd)
        fd_print(sorted_join(cask_args))
        fd_print()
        fd_print(sorted_join(tap))
        fd_print()
        fd_print(sorted_join(brew))
        fd_print()
        fd_print(sorted_join(cask))


if __name__ == "__main__":
    main()
